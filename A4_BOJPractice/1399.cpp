//https://www.acmicpc.net/problem/1399

/*보물의 위치 (Platinum 5)

Solution : 
완전 탐색으로는 이동 횟수가 10억이 넘을 수 있기 때문에 풀기 어렵다.
M = 2부터 차근차근 노가다하다보면 (프로그램을 짜봐도 된다)
dig(M^n)은 n에 대해 규칙이 있는 수열임을 알 수 있다.
쉬운 예로 9의 배수인 수들은 각 자릿수의 합이 모두 9인 것이 자명하기 때문에
M = 3n인 경우, 늦어도 3번째 숫자부터는 항상 dig(M^n) = 9이다.

M이 9 단위로 패턴이 반복된다.
M = 1 : 111111111111111111111111111111111111
M = 2 : 124875124875124875124875124875124875
M = 3 : 139999999999999999999999999999999999
M = 4 : 147147147147147147147147147147147147
M = 5 : 157842157842157842157842157842157842
M = 6 : 169999999999999999999999999999999999
M = 7 : 174174174174174174174174174174174174
M = 8 : 181818181818181818181818181818181818
M = 9 : 199999999999999999999999999999999999  
M = 10 : 11111111111111111111111111111111111111   
M = 11 : 124875124875124875124875124875124875     
M = 12 : 13999999999999999999999999999999999      
M = 13 : 1471471471471471471471471471471471
M = 14 : 157842157842157842157842157842157

*/

#include <iostream>
using namespace std;


int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
 
	int testcase;
    cin >> testcase;

    while (testcase--)
    {
        int K, M;
        cin >> K >> M;

        int x = 0, y = 0;

        //괄호 안의 숫자는 반복됨을 의미함
        if (M % 9 == 0) // 1(9) 패턴
        {
            const static int
                px[4] = {0, 0, 9, 9},
                py[4] = {-8, 1, 1, -8};

            x = px[K % 4];
            y = py[K % 4];

        } else if (M % 9 == 1) { // (1) 패턴 
            const static int
                px[4] = {0, 0, 1, 1},
                py[4] = {0, 1, 1, 0};

            x = px[K % 4];
            y = py[K % 4];

        } else if (M % 9 == 2) { // (124875) 패턴 
            const static int
                px[12] = {0, 0, 2, 2, -6, -6, -1, -1, -3, -3, 5, 5},
                py[12] = {0, 1, 1, -3, -3, 4, 4, 3, 3, 7, 7, 0};

            x = px[K % 12];
            y = py[K % 12];
        } else if (M % 9 == 3) { // 13(9) 패턴
            if (K == 1)
            {
                x = 0, y = 1;
            } else {
                const static int
                    px[4] = {-6, -6, 3, 3},
                    py[4] = {-8, 1, 1, -8};

                x = px[K % 4];
                y = py[K % 4];
            }
        } else if (M % 9 == 4) { // (147) 패턴 
            const static int
                px[12] = {0, 0, 4, 4, 3, 3, 10, 10, 6, 6, 7, 7},
                py[12] = {0, 1, 1, -6, -6, -2, -2, -3, -3, 4, 4, 0};

            x = px[K % 12];
            y = py[K % 12]; 
        } else if (M % 9 == 5) { // (157842) 패턴 
            const static int
                px[12] = {0, 0, 5, 5, -3, -3, -1, -1, -6, -6, 2, 2},
                py[12] = {0, 1, 1, -6, -6, -2, -2, -3, -3, 4, 4, 0};

            x = px[K % 12];
            y = py[K % 12];
        } else if (M % 9 == 6) { // 16(9) 패턴
            if (K == 1)
            {
                x = 0, y = 1;
            } else {
                const static int
                    px[4] = {-3, -3, 6, 6},
                    py[4] = {-8, 1, 1, -8};

                x = px[K % 4];
                y = py[K % 4];
            }
        } else if (M % 9 == 7) { // (174) 패턴 
            const static int
                px[12] = {0, 0, 7, 7, 6, 6, 10, 10, 3, 3, 4, 4},
                py[12] = {0, 1, 1, -3, -3, 4, 4, 3, 3, 7, 7, 0};

            x = px[K % 12];
            y = py[K % 12]; 
        } else if (M % 9 == 8) { // (18) 패턴 
            const static int
                px[4] = {0, 0, 8, 8},
                py[4] = {0, 1, 1, 0};

            x = px[K % 4];
            y = py[K % 4];
        }

        cout << x << ' ' << y << '\n';
    }
    
	return 0;
}