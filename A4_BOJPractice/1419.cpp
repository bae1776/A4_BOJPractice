//https://www.acmicpc.net/problem/1419

/*등차수열의 합 (Gold 5)

Solution : k = 2, 3, 4, 5에 대한 규칙 찾기

k = 2일때, 2x + d로 나타내진다. 자연수 쌍 (x, d)에 대하여
ft(3) = (1, 1) -> 1
ft(4) = ft(3) + (1, 2) -> 2
ft(5) = ft(4) + (1, 3) + (2, 1) -> 4
ft(6) = ft(5) + (1, 4) + (2, 2) -> 6
ft(7) = ft(6) + (1, 5) ... -> 9
ft(8) = 12
ft(9) = 16
ft(10) = 20
ft(11) = 25
결국 일반화 하면, ft(n) = ((n-1)/2) * (n/2)

k = 3일때, 3x + 3d로 나타낸다.
ft(6) = (1, 1) -> 1
ft(9) = ft(6) + (1, 2) + (2, 1) -> 3
ft(12) = 6
ft(15) = 10 ...

이는 등차수열의 합 공식을 이용하여 일반화하면,
ft(n) = n/3 * (n/3 - 1) / 2

k = 4일때, 4x + 6d
n에 대해
   (n - 6) / 4 = (n - 2)/4 - 1: (1, 1) -> 10, (2, 1) -> 14, (3, 1) -> 18, (4, 1) -> 22
+ (n - 12) / 4 =  n     /4 - 3: (1, 2) -> 16, (2, 2) -> 20, (3, 2) -> 24, (4, 2) -> 28
+ (n - 18) / 4 = (n - 2)/4 - 4: (1, 3) -> 22, (2, 3) -> 26, (3, 3) -> 30, (4, 3) -> 34
+ (n - 24) / 4 =  n     /4 - 6: (1, 4) -> 28, (2, 4) -> 32, (3, 4) -> 36, (4, 4) -> 40
                      L      R
p = n/6에 대하여
L항은 p = 1,2,3,4...에 대해 1, 5, 12, 22, 35, 51... 은 계차수열이고 이에 대한 일반항은
(3p*p - p) / 2 이며 추가로, 
t = (n % 6) / 2에 대해 t = 0이면 더하지 않고, t = 1이면, p/2를 추가로 더하고, t = 2이면, p를 추가로 더한다.
L항 = (3p*p - p) / 2 + (n % 6) / 2 * p / 2
R항은 p = 1,2,3,4...에 대해 -1, -4, -8, -14, -21, -30, -40, -52
-(1 * 1), -(1 * 4), -(2 * 4), -(2 * 7), -(3 * 7), -(3 * 10), -(4 * 10), -(4 * 13)로 나타낼 수 있으므로
R항 = -((p + 1)/2 * (3 * (p/2) + 1)) 
그러므로 ft(n) = (3p*p - p) / 2 + (n % 6) / 2 * p / 2 - (p/2 * (3 * (p+1)/2 - 2))

k = 5일때, 5x + 10d
ft(15) = 1
ft(20) = 2
ft(25) = 4 ... k = 2 꼴에서 5배된 것이다.
ft(n) = ((n-5)/10) * (n/10)

는 개뻘짓이고 그냥 가능한 숫자 갯수 구하면 되는 거였다.. (x, d 순서쌍 개수 구하는 건줄)
k = 2이면, 가능한 수는 작은 순으로 3, 4, 5, 6, ..... 이므로 max(0, n-2)를 반환한다.
k = 3이면, max(0, n/3 - 1)을 반환한다.
k = 4이면, 가능한 수는 작은 순으로 10, 14, 16, 18, 20, 22, 24.... 이므로
n이 14미만이면 n/10, n이 14 이상이면 n/2 - 5를 반환한다.
k = 5이면, 가능한 수는 15, 20, 25, 30 ... 이므로 max(0, n/5 - 2)을 반환한다.

*/

#include <iostream>
using namespace std;

int ft(int n, int k)
{
    switch (k)
    {
        case 2:
            return max(0, n - 2);
        case 3:
            return max(0, n / 3 - 1);
        case 4:
            if (n < 14)
                return n / 10;
            else
                return n / 2 - 5;
        case 5:
            return max(0, n / 5 - 2);
    }
    return 0;
}


int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);

    int l, r, k;
    cin >> l >> r >> k;
    cout << ft(r, k) - ft(l - 1, k);

	return 0;
}
